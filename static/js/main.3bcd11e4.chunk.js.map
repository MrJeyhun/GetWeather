{"version":3,"sources":["app_component/weather.component.jsx","utils/utilities.js","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","props","city","country","weatherIcon","temp_celsius","temp_min","temp_max","description","error","message","role","Form","onSubmit","getWeather","type","name","autoComplete","placeholder","API_key","App","e","a","async","preventDefault","target","elements","value","fetch","API_call","json","response","setState","state","console","log","cod","sys","celsius","convertToCelsius","main","temp","weather","icon","Clouds","set_WeatherIcon","id","icons","rangeID","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Math","floor","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bcd11e4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//There's \"0 issue => when temp is 0 if statement consider that it's false\r\nconst Weather = props => (\r\n  <div className=\"container text-light\">\r\n    <div className=\"cards pt-4\">\r\n      <h1>\r\n        {props.city} , {props.country}\r\n      </h1>\r\n      <h5 className=\"py-4\">\r\n        <i className={`wi ${props.weatherIcon} display-1`}></i>\r\n      </h5>\r\n\r\n      {props.temp_celsius || props.temp_celsius === 0 ? (\r\n        <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n      ) : null}\r\n\r\n      {/*show min and max temperatures*/}\r\n      {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n      <h4 className=\"py-3\">{props.description}</h4>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst minmaxTemp = (min, max) => {\r\n  if ((min && max) || min === 0 || max === 0) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nexport const error = message => (\r\n  <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n    {message}\r\n  </div>\r\n);\r\n\r\n// export const set_WeatherIcon = (icons, rangeID) => {\r\n//   switch (true) {\r\n//     case rangeID >= 200 && rangeID <= 232:\r\n//       this.setState({ icon: this.weatherIcon.Thunderstorm });\r\n//       break;\r\n//     case rangeID >= 300 && rangeID <= 321:\r\n//       this.setState({ icon: this.weatherIcon.Drizzle });\r\n//       break;\r\n//     case rangeID >= 500 && rangeID <= 531:\r\n//       this.setState({ icon: this.weatherIcon.Rain });\r\n//       break;\r\n//     case rangeID >= 600 && rangeID <= 622:\r\n//       this.setState({ icon: this.weatherIcon.Snow });\r\n//       break;\r\n//     case rangeID >= 701 && rangeID <= 781:\r\n//       this.setState({ icon: this.weatherIcon.Atmosphere });\r\n//       break;\r\n//     case rangeID === 800:\r\n//       this.setState({ icon: this.weatherIcon.Clear });\r\n//       break;\r\n//     case rangeID >= 801 && rangeID <= 804:\r\n//       this.setState({ icon: this.weatherIcon.Clouds });\r\n//       break;\r\n//     default:\r\n//       this.setState({ icon: this.weatherIcon.Clouds });\r\n//   }\r\n// };\r\n","import React from \"react\";\r\nimport \"./form.style.css\";\r\nimport { error } from \"../utils/utilities\";\r\n\r\nconst Form = props => (\r\n  <div className=\"container text-light\">\r\n    <div>{props.error ? error(props.error) : null}</div>\r\n    <form onSubmit={props.getWeather}>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3 offset-md-2 mb-4 mr-md-3\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"city\"\r\n            className=\"form-city\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"City\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 mb-4 mr-md-3\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"country\"\r\n            className=\"form-country\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Country\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n          <button className=\"btn btn-warning\">Get Weather</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Weather from \"./app_component/weather.component\";\nimport Form from \"./app_component/form.component\";\nimport { error } from \"./utils/utilities\";\n\n//API key api.openweathermap.org/data/2.5/weather?q=London\nconst API_key = \"138e72ac54592f72eaa4d89a634ebda4\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      response: null,\n      country: \"\",\n      city: \"\",\n      main: \"\",\n      icon: \"\",\n      celsius: \"\",\n      temp_min: \"\",\n      temp_max: \"\",\n      description: \"\",\n      error: \"\"\n    };\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getWeather = async e => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n      try {\n        const API_call = await fetch(\n          `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`\n        );\n        const response = await API_call.json();\n        this.setState({ response });\n      } catch (e) {\n        this.setState({\n          error: `API Connection Failed: ${e}, Check Internet Connection`\n        });\n        return error(this.state.error);\n      }\n\n      const { response } = this.state;\n      console.log(response);\n\n      if (response.cod === 200) {\n        this.setState({\n          city: `${response.name}`,\n          country: `${response.sys.country}`,\n          celsius: this.convertToCelsius(+response.main.temp),\n          temp_min: this.convertToCelsius(+response.main.temp_min),\n          temp_max: this.convertToCelsius(+response.main.temp_max),\n          description: response.weather[0].description,\n          icon: this.weatherIcon.Clouds, //by default\n          error: \"\"\n        });\n\n        this.set_WeatherIcon(this.weatherIcon, response.weather[0].id);\n      } else {\n        this.setState({ error: response.message });\n        error(this.state.error);\n      }\n    } else {\n      this.setState({ error: \"Please Enter City and Country\" });\n    }\n  };\n\n  convertToCelsius(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  set_WeatherIcon = (icons, rangeID) => {\n    switch (true) {\n      case rangeID >= 200 && rangeID <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeID >= 300 && rangeID <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeID >= 500 && rangeID <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeID >= 600 && rangeID <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeID >= 701 && rangeID <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeID === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeID >= 801 && rangeID <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  };\n\n  render() {\n    const {\n      city,\n      country,\n      celsius,\n      temp_min,\n      temp_max,\n      description,\n      icon\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Form getWeather={this.getWeather} error={this.state.error} />\n        {city && country ? (\n          <Weather\n            city={city}\n            country={country}\n            temp_celsius={celsius}\n            temp_min={temp_min}\n            temp_max={temp_max}\n            description={description}\n            weatherIcon={icon}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}